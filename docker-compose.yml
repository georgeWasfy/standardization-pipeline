services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: ${KAFKA_KRAFT_CLUSTER_ID}
      KAFKA_NODE_ID: ${KAFKA_NODE_ID}
      KAFKA_PROCESS_ROLES: ${KAFKA_PROCESS_ROLES}
      KAFKA_CFG_LISTENERS: ${KAFKA_CFG_LISTENERS}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: ${KAFKA_CFG_CONTROLLER_LISTENER_NAMES}
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: ${KAFKA_CFG_CONTROLLER_QUORUM_VOTERS}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: ${KAFKA_CFG_INTER_BROKER_LISTENER_NAME}
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_CFG_LOG_DIRS: ${KAFKA_CFG_LOG_DIRS}
    volumes:
      - kafka_data:/bitnami/kafka/data

  postgres:
    build: ./postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    command:
      [
        "postgres",
        "-c",
        "wal_level=logical",
        "-c",
        "max_replication_slots=4",
        "-c",
        "max_wal_senders=4"
      ]

  connect:
    image: quay.io/debezium/connect:2.3
    container_name: connect
    ports:
      - "8083:8083"
    depends_on:
      - kafka
      - postgres
    environment:
      BOOTSTRAP_SERVERS: ${BOOTSTRAP_SERVERS}
      GROUP_ID: ${GROUP_ID}
      CONFIG_STORAGE_TOPIC: ${CONFIG_STORAGE_TOPIC}
      OFFSET_STORAGE_TOPIC: ${OFFSET_STORAGE_TOPIC}
    volumes:
      - connect-configs:/kafka/connect/configs

  register-connector:
    image: alpine:latest
    container_name: register-connector
    depends_on:
      - connect
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DB_SERVER_NAME: ${DB_SERVER_NAME}
      TOPIC_PREFIX: ${TOPIC_PREFIX}
    volumes:
      - ./debezium/register-connector.sh:/register-connector.sh
      - ./debezium/register-postgres.template.json:/config/register-postgres.template.json
    entrypoint: ["sh", "/register-connector.sh"]

  kafka-consumer:
    build: ./kafka-consumer
    container_name: kafka-consumer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_TOPIC: ${KAFKA_TOPIC}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      AIRFLOW_DAG_TRIGGER_URL: ${AIRFLOW_DAG_TRIGGER_URL}
      AIRFLOW_DAG_USER: ${AIRFLOW__WEBSERVER__DEFAULT_USER}
      AIRFLOW_DAG_PASSWORD: ${AIRFLOW__WEBSERVER__DEFAULT_PASSWORD}
    ports:
      - "5000:5000"

  airflow-webserver:
    build: ./airflow
    container_name: airflow-webserver
    restart: always
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__WEBSERVER__DEFAULT_USER: ${AIRFLOW__WEBSERVER__DEFAULT_USER}
      AIRFLOW__WEBSERVER__DEFAULT_PASSWORD: ${AIRFLOW__WEBSERVER__DEFAULT_PASSWORD}
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: ${AIRFLOW__WEBSERVER__EXPOSE_CONFIG}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__API__AUTH_BACKEND: ${AIRFLOW__API__AUTH_BACKEND}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/models:/opt/airflow/models
    ports:
      - "8080:8080"
    command: >
      bash -c "
        airflow db migrate &&
        airflow users create --username ${AIRFLOW__WEBSERVER__DEFAULT_USER} --password ${AIRFLOW__WEBSERVER__DEFAULT_PASSWORD} --firstname Air --lastname Flow --role Admin --email admin@example.com &&
        airflow webserver
      "

  airflow-scheduler:
    build: ./airflow
    restart: always
    container_name: airflow-scheduler
    depends_on:
      - airflow-webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
      AIRFLOW__API__AUTH_BACKEND: ${AIRFLOW__API__AUTH_BACKEND}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/models:/opt/airflow/models
    command: ["scheduler"]

  search:
    build: ./search
    container_name: search
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - postgres
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}

volumes:
  kafka_data:
  pgdata:
  connect-configs:
